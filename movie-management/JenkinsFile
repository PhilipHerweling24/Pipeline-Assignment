pipeline {
    agent any

    environment {
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=false'
        DOCKERHUB_USERNAME = credentials('Dockerhub').username
        DOCKERHUB_TOKEN = credentials('Dockerhub').password
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/PhilipHerweling24/Pipeline-Assignment.git'
            }
        }

        stage('Build') {
            steps {
                dir('movie-management') {
                    echo 'Building the project...'
                    bat "mvn clean compile"
                }
            }
        }

        stage('Tests') {
            steps {
                dir('movie-management') {
                    echo 'Running unit & integration tests'
                    bat "mvn test -Dtest=KarateSpringBootTestIT"
                    archiveArtifacts artifacts: 'target/karate-reports/karate-summary.html', allowEmptyArchive: true
                    publishHTML([
                        reportName: 'Karate Test Report',
                        reportDir: 'target/karate-reports',
                        reportFiles: 'karate-summary.html',
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true
                    ])
                    bat "mvn test"
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Security Scan (OWASP)') {
                    steps {
                        dir('movie-management') {
                            echo 'Running OWASP Dependency-Check...'
                            bat "mvn org.owasp:dependency-check-maven:check"
                            archiveArtifacts artifacts: 'target/dependency-check-report.html', allowEmptyArchive: true
                            publishHTML([
                                reportName: 'OWASP Dependency Check',
                                reportDir: 'target',
                                reportFiles: 'dependency-check-report.html',
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true
                            ])
                        }
                    }
                }

        stage('Code Coverage') {
            steps {
                dir('movie-management') {
                    echo 'Generating JaCoCo report...'
                    bat "mvn jacoco:report"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('movie-management') {
                    withSonarQubeEnv('sonarqube') {
                        bat """
                        mvn sonar:sonar ^
                            -Dsonar.projectKey=pipeline-assignment ^
                            -Dsonar.projectName="Movie Management API" ^
                            -Dsonar.projectVersion=1.0 ^
                            -Dsonar.projectBaseDir=movie-management ^
                            -Dsonar.sources=src/main/java ^
                            -Dsonar.tests=src/test/java ^
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml ^
                            -Dsonar.language=java ^
                            -Dsonar.sourceEncoding=UTF-8 ^
                            -Dsonar.host.url=http://localhost:9000 ^
                            -Dsonar.scm.disabled=true ^
                            -Dsonar.java.binaries=target/classes ^
                            -Dsonar.token=sqa_f12ad9b340d9d1501e892bd1520b4214e5b2c00e
                        """
                    }
                }
            }
        }

        stage('Package') {
            steps {
                dir('movie-management') {
                    echo 'Packaging the application...'
                    bat "mvn package"
                }
            }
        }

        stage('Docker Build & Push') {
                    steps {
                        dir('movie-management') {
                            script {
                                def dockerImage = 'philipherweling/movie-management'
                                def imageTag = "latest"

                                echo "Logging in to Docker Hub..."
                                sh "echo ${DOCKERHUB_TOKEN} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"

                                echo "Building Docker image..."
                                sh "docker build -t ${dockerImage}:${imageTag} ."

                                echo "Pushing Docker image to Docker Hub..."
                                sh "docker push ${dockerImage}:${imageTag}"
                            }
                        }
                    }
                }


        stage('Deploy to EC2') {
            steps {
                echo 'Deploying application to EC2 using Ansible...'
                script {
                    bat 'wsl bash -c "cd \\"/mnt/c/Users/miggy/OneDrive/Documents/1 Masters/Semester 2/Continuous Build and Delivery/Pipeline Assignment/Pipeline-Assignment/movie-management\\" && ansible-playbook -i inventory.ini deploy.yaml"'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        failure {
            echo 'Build failed.'
        }
    }
}



