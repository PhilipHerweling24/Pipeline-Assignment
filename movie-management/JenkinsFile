pipeline {
    agent any

    environment {
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=false'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/PhilipHerweling24/Pipeline-Assignment.git'
            }
        }

        stage('Build') {
            steps {
                dir('movie-management') {
                    echo 'Building the project...'
                    bat "mvn clean compile"
                }
            }
        }

        stage('Unit & Integration Tests') {
            steps {
                dir('movie-management') {
                    echo 'Running unit & integration tests...'
                    bat "mvn test"
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Karate Tests') {
            steps {
                dir('movie-management') {
                    echo 'Running Karate tests...'
                    script {
                        def karateOutputPath = 'target/karate-reports'
                        def result = bat(script: "mvn test -Dkarate.options=\"--tags @smoke\" -Dkarate.output.path=${karateOutputPath}", returnStatus: true)
                        if (result != 0) {
                            error "Karate tests failed"
                        }
                    }
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Code Coverage') {
            steps {
                dir('movie-management') {
                    echo 'Generating JaCoCo coverage report...'
                    bat "mvn jacoco:report"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('movie-management') {
                    withSonarQubeEnv('MySonarQubeServer') {
                        bat "mvn sonar:sonar -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml"
                    }
                }
            }
        }

        stage('Package') {
            steps {
                dir('movie-management') {
                    echo 'Packaging the application...'
                    bat "mvn package"
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        failure {
            echo 'Build failed.'
        }
    }
}



